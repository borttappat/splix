#!/usr/bin/env bash
# Router Integration Script - Adds generated router configs to dotfiles
# Run from splix repo to integrate with dotfiles

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SPLIX_DIR="$(dirname "$SCRIPT_DIR")"
readonly DOTFILES_DIR="${DOTFILES_DIR:-$HOME/dotfiles}"

log() { echo "[$(date '+%H:%M:%S')] $*"; }
error() { echo "[ERROR] $*" >&2; exit 1; }

check_requirements() {
    [[ -d "$DOTFILES_DIR" ]] || error "Dotfiles directory not found at $DOTFILES_DIR"
    [[ -f "$SPLIX_DIR/hardware-results.env" ]] || error "Run hardware detection first: ./scripts/hardware-identify.sh"
    [[ -d "$SPLIX_DIR/scripts/generated-configs" ]] || error "Run config generation: ./scripts/vm-setup-generator.sh"
}

generate_router_configs() {
    log "Generating router configurations from hardware detection..."
    
    cd "$SPLIX_DIR"
    ./scripts/vm-setup-generator.sh
    
    log "Router configs generated in scripts/generated-configs/"
}

create_router_modules() {
    log "Creating temporary router modules in dotfiles..."
    
    mkdir -p "$DOTFILES_DIR/modules/router-generated"
    
    # Copy generated VM config
    cp "$SPLIX_DIR/modules/router-vm-config.nix" "$DOTFILES_DIR/modules/router-generated/vm.nix"
    
    # Copy generated host config  
    cp "$SPLIX_DIR/scripts/generated-configs/host-passthrough.nix" "$DOTFILES_DIR/modules/router-generated/host.nix"
    
    log "Router modules created in dotfiles/modules/router-generated/"
}

add_router_configurations() {
    log "Adding router configurations to dotfiles flake.nix..."
    
    # Check if router configs already exist
    if grep -q "router-vm.*=" "$DOTFILES_DIR/flake.nix"; then
        log "Router configurations already exist in flake.nix"
        return
    fi
    
    # Create backup
    cp "$DOTFILES_DIR/flake.nix" "$DOTFILES_DIR/flake.nix.backup"
    
    # Find the line with the last nixosConfiguration and add router configs after it
    # Insert before the final closing brace of nixosConfigurations
    awk '
    BEGIN { in_nixos_configs = 0; added = 0 }
    /nixosConfigurations = {/ { in_nixos_configs = 1 }
    in_nixos_configs && /^[[:space:]]*};[[:space:]]*$/ && !added {
        print "        # Generated Router Configurations (temporary)"
        print "        router-host = nixpkgs.lib.nixosSystem {"
        print "          system = \"x86_64-linux\";"
        print "          modules = ["
        print "            { nixpkgs.config.allowUnfree = true; }"
        print "            { nixpkgs.overlays = [ overlay-unstable ]; }"
        print "            /etc/nixos/hardware-configuration.nix"
        print "            ./modules/router-generated/host.nix"
        print "          ];"
        print "        };"
        print ""
        print "        router-vm = nixpkgs.lib.nixosSystem {"
        print "          system = \"x86_64-linux\";"
        print "          modules = ["
        print "            { nixpkgs.config.allowUnfree = true; }"
        print "            { nixpkgs.overlays = [ overlay-unstable ]; }"
        print "            ./modules/router-generated/vm.nix"
        print "            {"
        print "              fileSystems.\"/\" = {"
        print "                device = \"/dev/vda\";"
        print "                fsType = \"ext4\";"
        print "              };"
        print "              boot.loader.grub.device = \"/dev/vda\";"
        print "              system.stateVersion = nixpkgs.lib.mkForce \"25.05\";"
        print "            }"
        print "          ];"
        print "        };"
        added = 1
    }
    { print }
    ' "$DOTFILES_DIR/flake.nix" > "$DOTFILES_DIR/flake.nix.tmp"
    
    mv "$DOTFILES_DIR/flake.nix.tmp" "$DOTFILES_DIR/flake.nix"
    
    log "Router configurations added to dotfiles flake.nix (backup saved)"
}

create_router_commands() {
    log "Creating router management commands in dotfiles..."
    
    cat > "$DOTFILES_DIR/scripts/bash/router-deploy.sh" << EOF
#!/usr/bin/env bash
# Router VM deployment and management (generated by splix)

set -euo pipefail

case "\${1:-status}" in
    status)
        echo "=== Router VM Status ==="
        sudo virsh list --all | grep -E "(router-vm|State)" || echo "No router VM found"
        echo
        echo "=== VFIO Status ==="
        lspci -nnk | grep -A3 -i network
        echo
        echo "=== Generated Configs ==="
        [[ -d ~/dotfiles/modules/router-generated ]] && echo "✓ Router configs present" || echo "✗ No router configs"
        ;;
    build-vm)
        cd ~/dotfiles
        nix build .#nixosConfigurations.router-vm.config.system.build.vm --impure
        echo "✓ Router VM built. Test with: ~/splix/scripts/router-vm-test.sh"
        ;;
    deploy-host)
        cd ~/dotfiles
        sudo nixos-rebuild switch --flake .#router-host
        echo "✓ Router host config applied. Reboot required!"
        ;;
    start)
        echo "Starting router VM with libvirt..."
        sudo virsh start router-vm || echo "VM may already be running"
        ;;
    console)
        echo "Use: ~/splix/scripts/router-vm-test.sh"
        ;;
    recovery)
        echo "Running emergency recovery..."
        sudo systemctl start network-emergency 2>/dev/null || \${HOME}/splix/scripts/generated-configs/emergency-recovery.sh
        ;;
    *)
        echo "Usage: \$0 [status|build-vm|deploy-host|start|console|recovery]"
        echo "  status     - Check router and VFIO status"
        echo "  build-vm   - Build router VM for testing"
        echo "  deploy-host- Apply router host config (needs reboot)"
        echo "  start      - Start router VM"
        echo "  console    - Instructions for console access"
        echo "  recovery   - Emergency network recovery"
        ;;
esac
EOF

    chmod +x "$DOTFILES_DIR/scripts/bash/router-deploy.sh"
    
    log "Router commands created in dotfiles"
}

main() {
    log "Starting router integration from splix to dotfiles..."
    log "Splix dir: $SPLIX_DIR"
    log "Dotfiles dir: $DOTFILES_DIR"
    
    check_requirements
    generate_router_configs
    create_router_modules
    add_router_configurations
    create_router_commands
    
    log "=== Router Integration Complete ==="
    log ""
    log "Generated files:"
    log "  $DOTFILES_DIR/modules/router-generated/   - Hardware-specific configs"
    log "  $DOTFILES_DIR/scripts/bash/router-deploy.sh - Management commands"
    log ""
    log "Next steps:"
    log "1. cd $DOTFILES_DIR && router-deploy build-vm"
    log "2. Test with: ~/splix/scripts/router-vm-test.sh"
    log "3. Deploy: router-deploy deploy-host && sudo reboot"
    log "4. Connect: ~/splix/scripts/router-vm-test.sh"
    log ""
    log "Clean up: ~/splix/scripts/router-clean.sh"
}

main "$@"
