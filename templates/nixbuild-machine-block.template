# For {{VENDOR}} {{MODEL}} specifically
elif echo "$current_model" | grep -qi "{{MODEL_MATCH}}"; then
    # Detect current specialisation
    CURRENT_LABEL=$(nixos-version | grep -o '\''[a-zA-Z-]*setup'\'' || echo "base-setup")
    echo "Current system: $CURRENT_LABEL"
    
    case "${1:-auto}" in
        "router-boot")
            echo "Building {{MACHINE_NAME}} with router specialisation, staging for boot..."
            sudo nixos-rebuild boot --impure --show-trace --option warn-dirty false --flake ~/dotfiles#{{MACHINE_NAME}}
            ;;
        "router-switch")
            echo "Building {{MACHINE_NAME}} and switching to router mode..."
            sudo nixos-rebuild switch --impure --show-trace --option warn-dirty false --flake ~/dotfiles#{{MACHINE_NAME}}
            echo "Switching to router mode..."
            ;;
        "base-switch")
            echo "Building {{MACHINE_NAME}} and staying in base mode..."
            sudo nixos-rebuild switch --impure --show-trace --option warn-dirty false --flake ~/dotfiles#{{MACHINE_NAME}}
            echo "✅ Base mode active"
            ;;
        *)
            echo "Building {{MACHINE_NAME}} and maintaining current mode ($CURRENT_LABEL)..."
            sudo nixos-rebuild switch --impure --show-trace --option warn-dirty false --flake ~/dotfiles#{{MACHINE_NAME}}
            
            # Add bridge recreation for router mode
            if [[ "$CURRENT_LABEL" == "router-setup" ]]; then
                echo "Ensuring virbr1 bridge exists for router mode..."
                if ! ip link show virbr1 >/dev/null 2>&1; then
                    sudo ip link add virbr1 type bridge
                    sudo ip addr add 192.168.100.1/24 dev virbr1
                    sudo ip link set virbr1 up
                    echo "✓ virbr1 bridge recreated"
                else
                    echo "✓ virbr1 bridge already exists"
                fi
            fi
            
            ;;
    esac
